#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.34011
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;



[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Darili")]
public partial class Event_orgDataContext : System.Data.Linq.DataContext
{
	
	private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
	
  #region 可扩展性方法定义
  partial void OnCreated();
  partial void InsertEvent_Org(Event_Org instance);
  partial void UpdateEvent_Org(Event_Org instance);
  partial void DeleteEvent_Org(Event_Org instance);
  partial void InsertEvent_MinorOrg(Event_MinorOrg instance);
  partial void UpdateEvent_MinorOrg(Event_MinorOrg instance);
  partial void DeleteEvent_MinorOrg(Event_MinorOrg instance);
  #endregion
	
	public Event_orgDataContext() : 
			base(global::System.Configuration.ConfigurationManager.ConnectionStrings["416ConnectionString"].ConnectionString, mappingSource)
	{
		OnCreated();
	}
	
	public Event_orgDataContext(string connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public Event_orgDataContext(System.Data.IDbConnection connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public Event_orgDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public Event_orgDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public System.Data.Linq.Table<Event_Org> Event_Org
	{
		get
		{
			return this.GetTable<Event_Org>();
		}
	}
	
	public System.Data.Linq.Table<Event_MinorOrg> Event_MinorOrg
	{
		get
		{
			return this.GetTable<Event_MinorOrg>();
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Event_Org")]
public partial class Event_Org : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _id;
	
	private string _NickName;
	
	private string _Org_Name;
	
	private string _Type;
	
	private bool _IsProved;
	
	private EntitySet<Event_MinorOrg> _Event_MinorOrg;
	
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnNickNameChanging(string value);
    partial void OnNickNameChanged();
    partial void OnOrg_NameChanging(string value);
    partial void OnOrg_NameChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    partial void OnIsProvedChanging(bool value);
    partial void OnIsProvedChanged();
    #endregion
	
	public Event_Org()
	{
		this._Event_MinorOrg = new EntitySet<Event_MinorOrg>(new Action<Event_MinorOrg>(this.attach_Event_MinorOrg), new Action<Event_MinorOrg>(this.detach_Event_MinorOrg));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int id
	{
		get
		{
			return this._id;
		}
		set
		{
			if ((this._id != value))
			{
				this.OnidChanging(value);
				this.SendPropertyChanging();
				this._id = value;
				this.SendPropertyChanged("id");
				this.OnidChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NickName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string NickName
	{
		get
		{
			return this._NickName;
		}
		set
		{
			if ((this._NickName != value))
			{
				this.OnNickNameChanging(value);
				this.SendPropertyChanging();
				this._NickName = value;
				this.SendPropertyChanged("NickName");
				this.OnNickNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Org_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string Org_Name
	{
		get
		{
			return this._Org_Name;
		}
		set
		{
			if ((this._Org_Name != value))
			{
				this.OnOrg_NameChanging(value);
				this.SendPropertyChanging();
				this._Org_Name = value;
				this.SendPropertyChanged("Org_Name");
				this.OnOrg_NameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
	public string Type
	{
		get
		{
			return this._Type;
		}
		set
		{
			if ((this._Type != value))
			{
				this.OnTypeChanging(value);
				this.SendPropertyChanging();
				this._Type = value;
				this.SendPropertyChanged("Type");
				this.OnTypeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsProved", DbType="Bit NOT NULL")]
	public bool IsProved
	{
		get
		{
			return this._IsProved;
		}
		set
		{
			if ((this._IsProved != value))
			{
				this.OnIsProvedChanging(value);
				this.SendPropertyChanging();
				this._IsProved = value;
				this.SendPropertyChanged("IsProved");
				this.OnIsProvedChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Event_Org_Event_MinorOrg", Storage="_Event_MinorOrg", ThisKey="Org_Name", OtherKey="Org_Name")]
	public EntitySet<Event_MinorOrg> Event_MinorOrg
	{
		get
		{
			return this._Event_MinorOrg;
		}
		set
		{
			this._Event_MinorOrg.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Event_MinorOrg(Event_MinorOrg entity)
	{
		this.SendPropertyChanging();
		entity.Event_Org = this;
	}
	
	private void detach_Event_MinorOrg(Event_MinorOrg entity)
	{
		this.SendPropertyChanging();
		entity.Event_Org = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Event_MinorOrg")]
public partial class Event_MinorOrg : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _id;
	
	private string _Org_Name;
	
	private string _NickName;
	
	private EntityRef<Event_Org> _Event_Org;
	
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnOrg_NameChanging(string value);
    partial void OnOrg_NameChanged();
    partial void OnNickNameChanging(string value);
    partial void OnNickNameChanged();
    #endregion
	
	public Event_MinorOrg()
	{
		this._Event_Org = default(EntityRef<Event_Org>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int id
	{
		get
		{
			return this._id;
		}
		set
		{
			if ((this._id != value))
			{
				this.OnidChanging(value);
				this.SendPropertyChanging();
				this._id = value;
				this.SendPropertyChanged("id");
				this.OnidChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Org_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string Org_Name
	{
		get
		{
			return this._Org_Name;
		}
		set
		{
			if ((this._Org_Name != value))
			{
				if (this._Event_Org.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnOrg_NameChanging(value);
				this.SendPropertyChanging();
				this._Org_Name = value;
				this.SendPropertyChanged("Org_Name");
				this.OnOrg_NameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NickName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string NickName
	{
		get
		{
			return this._NickName;
		}
		set
		{
			if ((this._NickName != value))
			{
				this.OnNickNameChanging(value);
				this.SendPropertyChanging();
				this._NickName = value;
				this.SendPropertyChanged("NickName");
				this.OnNickNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Event_Org_Event_MinorOrg", Storage="_Event_Org", ThisKey="Org_Name", OtherKey="Org_Name", IsForeignKey=true)]
	public Event_Org Event_Org
	{
		get
		{
			return this._Event_Org.Entity;
		}
		set
		{
			Event_Org previousValue = this._Event_Org.Entity;
			if (((previousValue != value) 
						|| (this._Event_Org.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Event_Org.Entity = null;
					previousValue.Event_MinorOrg.Remove(this);
				}
				this._Event_Org.Entity = value;
				if ((value != null))
				{
					value.Event_MinorOrg.Add(this);
					this._Org_Name = value.Org_Name;
				}
				else
				{
					this._Org_Name = default(string);
				}
				this.SendPropertyChanged("Event_Org");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}
#pragma warning restore 1591
